[{"C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\index.js":"1","C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\App.js":"2","C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\reportWebVitals.js":"3","C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\components\\TileGrid.js":"4","C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\components\\CurrentTiles.js":"5","C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\components\\Header.js":"6","C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\helper\\calculator.js":"7","C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\css\\CurrentTiles.js":"8"},{"size":517,"mtime":1607065939504,"results":"9","hashOfConfig":"10"},{"size":333,"mtime":1607503032714,"results":"11","hashOfConfig":"10"},{"size":375,"mtime":1607065939506,"results":"12","hashOfConfig":"10"},{"size":14884,"mtime":1607514483578,"results":"13","hashOfConfig":"10"},{"size":1076,"mtime":1607065939493,"results":"14","hashOfConfig":"10"},{"size":477,"mtime":1607065939494,"results":"15","hashOfConfig":"10"},{"size":8320,"mtime":1607514177093,"results":"16","hashOfConfig":"10"},{"size":0,"mtime":1607065939496,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17su5sq",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\index.js",[],"C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\App.js",["35"],"C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\reportWebVitals.js",[],"C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\components\\TileGrid.js",["36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  GridList,\r\n  GridListTile,\r\n  Button,\r\n  Container,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { calculateTai } from \"../helper/calculator.js\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flexGrow: 1,\r\n    // justifyContent: \"space-around\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n    width: \"100vh\",\r\n    height: \"100vh\",\r\n    overflow: \"hidden\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    flexWrap: \"wrap\",\r\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n    transform: \"translateZ(0)\",\r\n    imgFullHeight: \"true\",\r\n    justifyContent: \"center\",\r\n  },\r\n  title: {\r\n    color: theme.palette.primary.light,\r\n  },\r\n  titleBar: {\r\n    background:\r\n      \"linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\",\r\n  },\r\n  buttonContainer: {\r\n    // margin: theme.spacing(1),\r\n    alignContent: \"center\",\r\n    justifyContent: \"center\",\r\n    minHeight: \"100vh\",\r\n  },\r\n  container: {\r\n    paddingLeft: 50,\r\n    paddingRight: 50,\r\n    flexGrow: 1,\r\n  },\r\n  form: {\r\n    alignContent: \"center\",\r\n    flexWrap: \"wrap\",\r\n    width: \"100%\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\n// Generates tilesData\r\n\r\nfunction populateTiles() {\r\n  const tilesData = [];\r\n  // var types = [\"bamboo\",\"tong\",\"wan\"]\r\n  var types = [\"t\", \"b\", \"w\"];\r\n  types.forEach((element) => {\r\n    for (var i = 1; i <= 9; i++) {\r\n      var obj = {};\r\n      obj[\"img\"] = \"assets/\" + element + i + \".png\";\r\n      obj[\"id\"] = element + i;\r\n      tilesData.push(obj);\r\n    }\r\n  });\r\n  // for (var i = 0; i < 30; i++) {\r\n  //   var obj = {};\r\n  //   obj[\"img\"] = \"assets/t1.png\";\r\n  //   obj[\"id\"] = \"t1\";\r\n  //   tilesData.push(obj);\r\n  // }\r\n  var others = [\"dong\", \"nan\", \"xi\", \"bei\", \"zhong\", \"fa\", \"baiban\"];\r\n  others.forEach((element) => {\r\n    var obj = {};\r\n    obj[\"img\"] = \"assets/\" + element + \".png\";\r\n    obj[\"id\"] = element;\r\n    tilesData.push(obj);\r\n  });\r\n  return tilesData;\r\n}\r\n\r\nfunction populateFlowers() {\r\n  const tilesData = [];\r\n  for (var i = 1; i <= 8; i++) {\r\n    var obj = {};\r\n    obj[\"img\"] = \"assets/\" + \"f\" + i + \".png\";\r\n    obj[\"id\"] = \"f\" + i;\r\n    tilesData.push(obj);\r\n  }\r\n\r\n  for (var i = 1; i <= 4; i++) {\r\n    var obj = {};\r\n    obj[\"img\"] = \"assets/\" + \"a\" + i + \".png\";\r\n    obj[\"id\"] = \"a\" + i;\r\n    tilesData.push(obj);\r\n  }\r\n\r\n  return tilesData;\r\n}\r\n\r\n// function populateCurrentTiles(numTiles, defaultElement) {\r\n//   var tiles = [];\r\n//   for (var i = 0; i < numTiles; i++) {\r\n//     tiles.push(defaultElement);\r\n//   }\r\n//   return tiles;\r\n// }\r\n\r\nexport default function TileGrid() {\r\n  const styles = useStyles;\r\n\r\n  // State for tiles\r\n  const tilesData = populateTiles();\r\n  const [tilesCurrent, setTiles] = useState([]);\r\n\r\n  // State for flowers\r\n  const flowersData = populateFlowers();\r\n  const [flowersCurrent, setFlowers] = useState([]);\r\n\r\n  // State for conditionals\r\n  const [conditions, setConditions] = useState({\r\n    ownwind: \"1\",\r\n    currentwind: \"1\",\r\n    haidilao: false,\r\n    huashang: false,\r\n    qg: false,\r\n    sevenzimo: false,\r\n    sevenshoot: false,\r\n    pinghustate: false,\r\n  });\r\n\r\n  // For checkbox\r\n  const handleChange = (event) => {\r\n    setConditions({ ...conditions, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  const handleRadioChange = (event) => {\r\n    // console.log(event);\r\n    setConditions({ ...conditions, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  function updateTiles(tilesCurrent, current) {\r\n    // Validate less than 13 tiles\r\n    if (tilesCurrent.length > 13) {\r\n      alert(\"Maximum tiles reached!\");\r\n      return;\r\n    }\r\n\r\n    // Validate max of 4 for that tile\r\n    var count = 0;\r\n    for (var i = 0; i < tilesCurrent.length; i++) {\r\n      if (tilesCurrent[i].id == current.id) {\r\n        count++;\r\n      }\r\n    }\r\n    if (count === 3) {\r\n      alert(\"You have already added 3 of these tiles, do not add GANG!\");\r\n      return;\r\n    }\r\n\r\n    setTiles((state) => {\r\n      return [...state, current];\r\n    });\r\n  }\r\n\r\n  // Resets tiles\r\n  function resetTiles(tilesCurrent, current) {\r\n    // let tiles = populateCurrentTiles(13, \"\");\r\n    var tiles = [];\r\n    setTiles(tiles);\r\n  }\r\n\r\n  // Updates flowers\r\n  function updateFlowers(flowersCurrent, current) {\r\n    for (var i = 0; i < flowersCurrent.length; i++) {\r\n      if (flowersCurrent[i].id === current.id) {\r\n        alert(\"You have already added this flower!\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    setFlowers((state) => {\r\n      return [...state, current];\r\n    });\r\n  }\r\n\r\n  // Resets flowers\r\n  function resetFlowers(flowersCurrent, current) {\r\n    var tiles = [];\r\n    setFlowers(tiles);\r\n  }\r\n\r\n  function handleSubmit() {\r\n    var tilesList = [];\r\n    tilesCurrent.forEach((element) => {\r\n      tilesList.push(element.id);\r\n    })\r\n    var tai = calculateTai(\r\n      tilesList,\r\n      conditions.currentwind,\r\n      conditions.haidilao,\r\n      conditions.qg,\r\n      conditions.sevenzimo,\r\n      conditions.sevenshoot,\r\n      conditions.pinghustate\r\n    );\r\n    alert(\"Congratulations! you have \" +tai + \"tai\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container maxWidth={\"md\"} alignContent={\"centre\"} display={\"flex\"}>\r\n        {/* For tiles */}\r\n        <h2>Select your tiles:</h2>\r\n        <h3>\r\n          <i>Note: Do not enter your Gang(s) - four of a kind.</i>\r\n        </h3>\r\n        <GridList cellHeight={\"auto\"} cols={9} style={styles.gridList}>\r\n          {tilesData.map((tile) => (\r\n            <GridListTile>\r\n              <Button\r\n                key={tile.id}\r\n                variant=\"outlined\"\r\n                className={styles.margin}\r\n                onClick={() => updateTiles(tilesCurrent, tile)}\r\n              >\r\n                <img src={tile.img} />\r\n              </Button>\r\n            </GridListTile>\r\n          ))}\r\n        </GridList>\r\n\r\n        {/* For flowers */}\r\n        <GridList cellHeight={\"auto\"} cols={8} style={styles.gridList}>\r\n          {flowersData.map((tile) => (\r\n            <GridListTile>\r\n              <Button\r\n                key={tile.id}\r\n                variant=\"outlined\"\r\n                className={styles.margin}\r\n                onClick={() => updateFlowers(flowersCurrent, tile)}\r\n              >\r\n                <img src={tile.img} />\r\n              </Button>\r\n            </GridListTile>\r\n          ))}\r\n        </GridList>\r\n        <br></br>\r\n\r\n        {/* Display tiles */}\r\n        <h2>Current tiles:</h2>\r\n        <Grid container className={styles.root} spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Grid container justify=\"center\" spacing={2}>\r\n              {tilesCurrent.map((tile) => (\r\n                <Grid key={tile} item>\r\n                  {/* refer to index of list to fetch image*/}\r\n                  {tile == \"\" ? (\r\n                    <img src=\"assets/default.png\" alt=\"\" />\r\n                  ) : (\r\n                    <img src={tile.img} />\r\n                  )}\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <br></br>\r\n        <Grid container className={styles.root} spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Grid container justify=\"center\" spacing={2}>\r\n              <Grid item>\r\n                <Button variant=\"outlined\" onClick={() => resetTiles()}>\r\n                  Clear\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Display flowers */}\r\n        <Grid container className={styles.root} spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Grid container justify=\"center\" spacing={2}>\r\n              {flowersCurrent.map((tile) => (\r\n                <Grid key={tile} item>\r\n                  {/* refer to index of list to fetch image*/}\r\n                  {tile == \"\" ? (\r\n                    <img src=\"assets/default.png\" alt=\"\" />\r\n                  ) : (\r\n                    <img src={tile.img} />\r\n                  )}\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <br></br>\r\n        <Grid container className={styles.root} spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Grid container justify=\"center\" spacing={2}>\r\n              <Grid item>\r\n                <Button variant=\"outlined\" onClick={() => resetFlowers()}>\r\n                  Clear\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {/* Conditionals */}\r\n        {console.log(conditions)}\r\n        <h2>Select your conditions:</h2>\r\n        <div className={\"form\"}>\r\n          <form>\r\n            <FormControl component=\"fieldset\">\r\n              <FormLabel component=\"legend\">Current Wind:</FormLabel>\r\n              <RadioGroup\r\n                row\r\n                aria-label=\"currentwind\"\r\n                name=\"currentwind\"\r\n                value={conditions.currentwind}\r\n              >\r\n                <FormControlLabel\r\n                  value=\"1\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label={<img src={\"assets/dong.png\"} />}\r\n                  onChange={handleRadioChange}\r\n                />\r\n                <FormControlLabel\r\n                  value=\"2\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label={<img src={\"assets/nan.png\"} />}\r\n                  onChange={handleRadioChange}\r\n                />\r\n                <FormControlLabel\r\n                  value=\"3\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label={<img src={\"assets/xi.png\"} />}\r\n                  onChange={handleRadioChange}\r\n                />\r\n                <FormControlLabel\r\n                  value=\"4\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label={<img src={\"assets/bei.png\"} />}\r\n                  onChange={handleRadioChange}\r\n                />\r\n              </RadioGroup>\r\n              <FormLabel component=\"legend\">Individual Wind:</FormLabel>\r\n              <RadioGroup\r\n                row\r\n                aria-label=\"position\"\r\n                name=\"ownwind\"\r\n                value={conditions.ownwind}\r\n              >\r\n                <FormControlLabel\r\n                  value=\"1\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label={<img src={\"assets/dong.png\"} />}\r\n                  onChange={handleRadioChange}\r\n                />\r\n                <FormControlLabel\r\n                  value=\"2\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label={<img src={\"assets/nan.png\"} />}\r\n                  onChange={handleRadioChange}\r\n                />\r\n                <FormControlLabel\r\n                  value=\"3\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label={<img src={\"assets/xi.png\"} />}\r\n                  onChange={handleRadioChange}\r\n                />\r\n                <FormControlLabel\r\n                  value=\"4\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label={<img src={\"assets/bei.png\"} />}\r\n                  onChange={handleRadioChange}\r\n                />\r\n              </RadioGroup>\r\n\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={conditions.haidilao}\r\n                    onChange={handleChange}\r\n                    name=\"haidilao\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Hai Di Lao (Winning off a tile in the last 4 tiles):\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={conditions.huashang}\r\n                    onChange={handleChange}\r\n                    name=\"huashang\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Hua Shang (Winning off a tile gotten from a flower):\"\r\n              />\r\n\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={conditions.qg}\r\n                    onChange={handleChange}\r\n                    name=\"qg\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Qiang Gang (Winning off a tile someone else self Gang):\"\r\n              />\r\n\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={conditions.sevenzimo}\r\n                    onChange={handleChange}\r\n                    name=\"sevenzimo\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Seven pairs (self-draw)\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={conditions.sevenshoot}\r\n                    onChange={handleChange}\r\n                    name=\"sevenshoot\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Seven pairs (winning of other's tile)\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={conditions.pinghustate}\r\n                    onChange={handleChange}\r\n                    name=\"pinghustate\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Pinghu\"\r\n              />\r\n              <Button variant=\"outlined\" onClick={() => handleSubmit()}>\r\n                Calculate\r\n              </Button>\r\n            </FormControl>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n// export default function TileGrid() {\r\n//   const classes = useStyles;\r\n//   var tilesData = populateTiles();\r\n//   return (\r\n//     <Grid container className={classes.root} spacing={2} justify=\"center\">\r\n//       <Grid item xs={12}>\r\n//         <Grid container  spacing={2}>\r\n//           {tilesData.map((tile, index) => (\r\n//             <Grid key={tile.id} item>\r\n//               <Button\r\n//                 key={tile.id}\r\n//                 cols={index % 9}\r\n//                 variant=\"outlined\"\r\n//                 className={classes.margin}\r\n//                 onClick={() => {\r\n//                   alert(tile.id);\r\n//                 }}\r\n//               >\r\n//                 <img src={tile.img} />\r\n//               </Button>\r\n//             </Grid>\r\n//           ))}\r\n//         </Grid>\r\n//       </Grid>\r\n//     </Grid>\r\n//   );\r\n// }\r\n","C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\components\\CurrentTiles.js",["56"],"C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\components\\Header.js",[],"C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\helper\\calculator.js",["57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73"],"C:\\Projects\\mahjong\\MahjongScoreCalculator\\frontend\\src\\css\\CurrentTiles.js",[],{"ruleId":"74","severity":1,"message":"75","line":2,"column":8,"nodeType":"76","messageId":"77","endLine":2,"endColumn":20},{"ruleId":"74","severity":1,"message":"78","line":1,"column":27,"nodeType":"76","messageId":"77","endLine":1,"endColumn":36},{"ruleId":"79","severity":1,"message":"80","line":98,"column":28,"nodeType":"81","messageId":"82","endLine":98,"endColumn":29},{"ruleId":"83","severity":1,"message":"84","line":103,"column":12,"nodeType":"76","messageId":"85","endLine":103,"endColumn":13},{"ruleId":"83","severity":1,"message":"86","line":104,"column":9,"nodeType":"76","messageId":"85","endLine":104,"endColumn":12},{"ruleId":"79","severity":1,"message":"80","line":105,"column":28,"nodeType":"81","messageId":"82","endLine":105,"endColumn":29},{"ruleId":"87","severity":1,"message":"88","line":164,"column":30,"nodeType":"81","messageId":"89","endLine":164,"endColumn":32},{"ruleId":"90","severity":1,"message":"91","line":239,"column":17,"nodeType":"92","endLine":239,"endColumn":39},{"ruleId":"90","severity":1,"message":"91","line":255,"column":17,"nodeType":"92","endLine":255,"endColumn":39},{"ruleId":"87","severity":1,"message":"88","line":270,"column":25,"nodeType":"81","messageId":"89","endLine":270,"endColumn":27},{"ruleId":"90","severity":1,"message":"91","line":273,"column":21,"nodeType":"92","endLine":273,"endColumn":43},{"ruleId":"87","severity":1,"message":"88","line":300,"column":25,"nodeType":"81","messageId":"89","endLine":300,"endColumn":27},{"ruleId":"90","severity":1,"message":"91","line":303,"column":21,"nodeType":"92","endLine":303,"endColumn":43},{"ruleId":"90","severity":1,"message":"91","line":338,"column":26,"nodeType":"92","endLine":338,"endColumn":57},{"ruleId":"90","severity":1,"message":"91","line":344,"column":26,"nodeType":"92","endLine":344,"endColumn":56},{"ruleId":"90","severity":1,"message":"91","line":350,"column":26,"nodeType":"92","endLine":350,"endColumn":55},{"ruleId":"90","severity":1,"message":"91","line":356,"column":26,"nodeType":"92","endLine":356,"endColumn":56},{"ruleId":"90","severity":1,"message":"91","line":370,"column":26,"nodeType":"92","endLine":370,"endColumn":57},{"ruleId":"90","severity":1,"message":"91","line":376,"column":26,"nodeType":"92","endLine":376,"endColumn":56},{"ruleId":"90","severity":1,"message":"91","line":382,"column":26,"nodeType":"92","endLine":382,"endColumn":55},{"ruleId":"90","severity":1,"message":"91","line":388,"column":26,"nodeType":"92","endLine":388,"endColumn":56},{"ruleId":"74","severity":1,"message":"78","line":2,"column":10,"nodeType":"76","messageId":"77","endLine":2,"endColumn":19},{"ruleId":"74","severity":1,"message":"93","line":31,"column":5,"nodeType":"76","messageId":"77","endLine":31,"endColumn":9},{"ruleId":"74","severity":1,"message":"94","line":38,"column":7,"nodeType":"76","messageId":"77","endLine":38,"endColumn":18},{"ruleId":"87","severity":1,"message":"88","line":42,"column":20,"nodeType":"81","messageId":"89","endLine":42,"endColumn":22},{"ruleId":"87","severity":1,"message":"88","line":55,"column":30,"nodeType":"81","messageId":"89","endLine":55,"endColumn":32},{"ruleId":"87","severity":1,"message":"88","line":65,"column":30,"nodeType":"81","messageId":"89","endLine":65,"endColumn":32},{"ruleId":"87","severity":1,"message":"95","line":65,"column":52,"nodeType":"81","messageId":"89","endLine":65,"endColumn":54},{"ruleId":"87","severity":1,"message":"88","line":68,"column":32,"nodeType":"81","messageId":"89","endLine":68,"endColumn":34},{"ruleId":"87","severity":1,"message":"88","line":68,"column":68,"nodeType":"81","messageId":"89","endLine":68,"endColumn":70},{"ruleId":"96","severity":1,"message":"97","line":103,"column":3,"nodeType":"98","messageId":"99","endLine":125,"endColumn":4},{"ruleId":"96","severity":1,"message":"97","line":128,"column":3,"nodeType":"98","messageId":"99","endLine":150,"endColumn":4},{"ruleId":"74","severity":1,"message":"100","line":170,"column":9,"nodeType":"76","messageId":"77","endLine":170,"endColumn":25},{"ruleId":"74","severity":1,"message":"101","line":174,"column":7,"nodeType":"76","messageId":"77","endLine":174,"endColumn":15},{"ruleId":"74","severity":1,"message":"102","line":178,"column":12,"nodeType":"76","messageId":"77","endLine":178,"endColumn":22},{"ruleId":"87","severity":1,"message":"88","line":274,"column":49,"nodeType":"81","messageId":"89","endLine":274,"endColumn":51},{"ruleId":"87","severity":1,"message":"88","line":276,"column":55,"nodeType":"81","messageId":"89","endLine":276,"endColumn":57},{"ruleId":"87","severity":1,"message":"95","line":281,"column":20,"nodeType":"81","messageId":"89","endLine":281,"endColumn":22},{"ruleId":"87","severity":1,"message":"95","line":285,"column":24,"nodeType":"81","messageId":"89","endLine":285,"endColumn":26},"no-unused-vars","'CurrentTiles' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-redeclare","'i' is already defined.","redeclared","'obj' is already defined.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'zimo' is assigned a value but never used.","'pinghustate' is assigned a value but never used.","Expected '!==' and instead saw '!='.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'consecutiveTiles' is assigned a value but never used.","'isPingHu' is assigned a value but never used.","'removeTile' is defined but never used."]